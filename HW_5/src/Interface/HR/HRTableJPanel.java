/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.HR;
import Business.*;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jiahuanli
 */
public class HRTableJPanel extends javax.swing.JPanel {

    private JPanel basePanel;
    private PersonDirectory personDirectory;
    /**
     * Creates new form SystemTableJPanel
     */

    public HRTableJPanel(JPanel basePanel, PersonDirectory personDirectory) {
       initComponents();
       this.basePanel = basePanel;
       this.personDirectory = personDirectory;
       populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel)tblPersonDirectory.getModel();
        dtm.setRowCount(0);
        for(Person person : personDirectory.getPersonDirectory()){
                Object row[] = new Object[4];
                row[0]=person;
                row[1]=person.getFirstName();
                row[2]=person.getLastName();
                ArrayList<String> userName = new ArrayList<>();
                UserAccountDirectory userAccountDirectory = person.getUserAccountDirectory();
                for(UserAccount userAccount:userAccountDirectory.getUserAccountDirectory()){
                    userName.add(userAccount.getUserName());
                }
                
                String nameList = userName.toString().replace("[","");
                nameList = nameList.replace("]","");
                row[3]=nameList;
                dtm.addRow(row);
            }
        }
   


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPersonDirectory = new javax.swing.JTable();
        txtUpdate = new javax.swing.JButton();
        txtCreate = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        cbSearch = new javax.swing.JComboBox<>();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Person Directory");

        tblPersonDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Person ID", "First Name", "Last Name", "User Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPersonDirectory);
        if (tblPersonDirectory.getColumnModel().getColumnCount() > 0) {
            tblPersonDirectory.getColumnModel().getColumn(0).setResizable(false);
            tblPersonDirectory.getColumnModel().getColumn(1).setResizable(false);
            tblPersonDirectory.getColumnModel().getColumn(2).setResizable(false);
            tblPersonDirectory.getColumnModel().getColumn(3).setResizable(false);
        }

        txtUpdate.setText("Update Person>>");
        txtUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUpdateActionPerformed(evt);
            }
        });

        txtCreate.setText("New Person>>");
        txtCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCreateActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jButton1.setText("Refreash");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cbSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Person ID", "First Name", "Last Name" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch)))
                        .addContainerGap(74, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCreate, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtUpdate, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCreate, txtUpdate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCreate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(jButton1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String search = txtSearch.getText();
        String searchTag = cbSearch.getSelectedItem().toString();
        Person person = new Person();
        if(searchTag.equals("Person ID")){
        person = personDirectory.searchPerson(search);
        if(person!=null){
            DefaultTableModel dtm = (DefaultTableModel)tblPersonDirectory.getModel();
            dtm.setRowCount(0);
            Object row[] = new Object[4];
                row[0]=person;
                row[1]=person.getFirstName();
                row[2]=person.getLastName();
                ArrayList<String> userName = new ArrayList<>();
                UserAccountDirectory userAccountDirectory = person.getUserAccountDirectory();
                for(UserAccount userAccount:userAccountDirectory.getUserAccountDirectory()){
                    userName.add(userAccount.getUserName());
                }
                String nameList = userName.toString().replace("[","");
                nameList = nameList.replace("]","");
                row[3]=nameList;
                dtm.addRow(row);
        }else{
            JOptionPane.showMessageDialog(null, "No person found!");
        }//Person ID, First Name, Last Name
        }else if(searchTag.equals("First Name")){
        ArrayList<Person> personResult = new ArrayList<>();
        personResult = personDirectory.searchFirstName(search);
        if(!personResult.isEmpty()){
            DefaultTableModel dtm = (DefaultTableModel)tblPersonDirectory.getModel();
            dtm.setRowCount(0);
            for(int i =0;i<personResult.size();i++){
                Object row[] = new Object[4];
                row[0]=personResult.get(i);
                row[1]=personResult.get(i).getFirstName();
                row[2]=personResult.get(i).getLastName();
                ArrayList<String> userName = new ArrayList<>();
                UserAccountDirectory userAccountDirectory = personResult.get(i).getUserAccountDirectory();
                for(UserAccount userAccount:userAccountDirectory.getUserAccountDirectory()){
                    userName.add(userAccount.getUserName());
                }
                String nameList = userName.toString().replace("[","");
                nameList = nameList.replace("]","");
                row[3]=nameList;
                dtm.addRow(row);
            }
        }else{
            JOptionPane.showMessageDialog(null, "No person found!");
        }    
        }else if(searchTag.equals("Last Name")){
         ArrayList<Person> personResult = new ArrayList<>();
        personResult = personDirectory.searchLastName(search);
        if(!personResult.isEmpty()){
            DefaultTableModel dtm = (DefaultTableModel)tblPersonDirectory.getModel();
            dtm.setRowCount(0);
            for(int i =0;i<personResult.size();i++){
                Object row[] = new Object[4];
                row[0]=personResult.get(i);
                row[1]=personResult.get(i).getFirstName();
                row[2]=personResult.get(i).getLastName();
                ArrayList<String> userName = new ArrayList<>();
                UserAccountDirectory userAccountDirectory = personResult.get(i).getUserAccountDirectory();
                for(UserAccount userAccount:userAccountDirectory.getUserAccountDirectory()){
                    userName.add(userAccount.getUserName());
                }
                String nameList = userName.toString().replace("[","");
                nameList = nameList.replace("]","");
                row[3]=nameList;
                dtm.addRow(row);
            }
        }else{
            JOptionPane.showMessageDialog(null, "No person found!");
        }    
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCreateActionPerformed
        // TODO add your handling code here:
        HRNewJPanel panel = new HRNewJPanel(basePanel, personDirectory);
        basePanel.add("HRNewJPanel",panel);
        CardLayout layout = (CardLayout)basePanel.getLayout();
        layout.next(basePanel);
    }//GEN-LAST:event_txtCreateActionPerformed

    private void txtUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUpdateActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPersonDirectory.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select!");
        }else{
            Person person = (Person)tblPersonDirectory.getValueAt(selectedRow, 0);
            HRUpdateJPanel panel = new HRUpdateJPanel(basePanel,person);
            basePanel.add("HRUpdateJPanel",panel);
            CardLayout layout = (CardLayout)basePanel.getLayout();
            layout.next(basePanel);
        }
    }//GEN-LAST:event_txtUpdateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        basePanel.remove(this);
        CardLayout layout = (CardLayout)basePanel.getLayout();
        layout.previous(basePanel);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPersonDirectory;
    private javax.swing.JButton txtCreate;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JButton txtUpdate;
    // End of variables declaration//GEN-END:variables
}
