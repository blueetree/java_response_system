/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Airliner;
import Business.Customer;
import Business.CustomerDirectory;
import Business.Flight;
import Business.FlightSchedule;
import Business.MasterFlightSchedule;
import Business.TravelAgency;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jiahuanli
 */
public class ManageMasterFlightScheduleJPanel extends javax.swing.JPanel {

    private JPanel rightJPanel;
    private TravelAgency travelAgency;
    private MasterFlightSchedule masterFlightSchedule;
    private CustomerDirectory customerDirectory;
    /**
     * Creates new form ManageAirlinerFlightScheduleJPanel
     */
    ManageMasterFlightScheduleJPanel(JPanel rightJPanel, TravelAgency travelAgency) {
        initComponents();
        this.rightJPanel = rightJPanel;
        this.travelAgency = travelAgency;
        masterFlightSchedule = travelAgency.getMasterFlightSchedule();
        customerDirectory = travelAgency.getCustomerDirectory();
        populateTable();
    }
    
     private void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel)tblFlightSchedule.getModel();
        dtm.setRowCount(0);
        for(FlightSchedule flightSchedule: masterFlightSchedule.getMasterFlightSchedule()){
            for(Flight flight: flightSchedule.getFlightSchedule()){
            Object[] row = new Object[5];
            row[0] = flight;
            row[1] = flight.getDepartLocation();
            row[2] = flight.getDepartDate();
            row[3] = flightSchedule.getFlightScheduleID();
            if(flight.getSeatsNum()>flight.getCustomerNum()){
              row[4] = true; 
            }else 
            {
              row[4] = false;
            }
            
            dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFlightSchedule = new javax.swing.JTable();
        btnNewFlight = new javax.swing.JButton();
        btnViewFlight = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnRefreash = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        cbSearch = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtCustomerID = new javax.swing.JTextField();
        btnBook = new javax.swing.JButton();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Flight Schedule");

        tblFlightSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight Number", "Departure Location", "Departure Date", "Flight Schedule ID", "Available"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFlightSchedule);
        if (tblFlightSchedule.getColumnModel().getColumnCount() > 0) {
            tblFlightSchedule.getColumnModel().getColumn(0).setResizable(false);
            tblFlightSchedule.getColumnModel().getColumn(1).setResizable(false);
            tblFlightSchedule.getColumnModel().getColumn(2).setResizable(false);
            tblFlightSchedule.getColumnModel().getColumn(3).setResizable(false);
            tblFlightSchedule.getColumnModel().getColumn(4).setResizable(false);
        }

        btnNewFlight.setText("New Flight");
        btnNewFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewFlightActionPerformed(evt);
            }
        });

        btnViewFlight.setText("View Flight");
        btnViewFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewFlightActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete Flight");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnRefreash.setText("Refresh Table");
        btnRefreash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreashActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cbSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Flight Number", "Depart Date", "Depart Location", "Time of Day" }));

        jLabel2.setText("Customer ID");

        txtCustomerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerIDActionPerformed(evt);
            }
        });

        btnBook.setText("Book a Seat");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRefreash))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNewFlight)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnViewFlight)))
                        .addGap(0, 32, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnBook))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSearch)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnNewFlight)
                    .addComponent(btnViewFlight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBook))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnRefreash))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewFlightActionPerformed
        // TODO add your handling code here:
        CreateNewFlightJPanel panel = new CreateNewFlightJPanel(rightJPanel,masterFlightSchedule);
        rightJPanel.add("CreateNewFlightJPanel",panel);
        CardLayout layout = (CardLayout)rightJPanel.getLayout();
        layout.next(rightJPanel);
    }//GEN-LAST:event_btnNewFlightActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFlightSchedule.getSelectedRow();
        if(selectedRow >= 0){
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null,"Would you like to delete the Flight?","Warning", dialogButton);
            if(dialogResult == JOptionPane.YES_NO_OPTION){
                Flight selectedFlight = (Flight)tblFlightSchedule.getValueAt(selectedRow, 0);
                String flightScheduleID = (String)tblFlightSchedule.getValueAt(selectedRow, 3);
                FlightSchedule flightSchedule = masterFlightSchedule.searchFlightSchedule(flightScheduleID);
                flightSchedule.deletedFlight(selectedFlight);
                populateTable();
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please select!");

        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        rightJPanel.remove(this);
        CardLayout layout = (CardLayout)rightJPanel.getLayout();
        layout.previous(rightJPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRefreashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreashActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_btnRefreashActionPerformed

    private void btnViewFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewFlightActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblFlightSchedule.getSelectedRow();
         if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select!");
  
         }else{
             Flight flight = (Flight)tblFlightSchedule.getValueAt(selectedRow,0);
             ViewFlightJPanel panel = new ViewFlightJPanel(rightJPanel,flight);
             rightJPanel.add("ViewFlightJPanel",panel);
             CardLayout layout = (CardLayout)rightJPanel.getLayout();
             layout.next(rightJPanel);
         }
    }//GEN-LAST:event_btnViewFlightActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:Flight Number, Depart Date, Depart Location, Time of Day
        Object selected = cbSearch.getSelectedItem();
        String searchTxt = txtSearch.getText();
        DefaultTableModel dtm =(DefaultTableModel)tblFlightSchedule.getModel();
        dtm.setRowCount(0);
        if(selected.toString().equals("Flight Number")){
        for(FlightSchedule flightSchedule: masterFlightSchedule.getMasterFlightSchedule()){
            for(Flight flight: flightSchedule.getFlightSchedule()){
            if(flight.getFlightID().equals(searchTxt)){
            Object[] row = new Object[5];
            row[0] = flight;
            row[1] = flight.getDepartLocation();
            row[2] = flight.getDepartDate();
            row[3] = flightSchedule.getFlightScheduleID();
            if(flight.getSeatsNum()>flight.getCustomerNum()){
              row[4] = true; 
            }else 
            {
              row[4] = false;
            }
            dtm.addRow(row);
            System.out.println("row[0]:"+row[0]);
            }
            }
        }    
        }else if(selected.toString().equals("Depart Date")){
         for(FlightSchedule flightSchedule: masterFlightSchedule.getMasterFlightSchedule()){
            for(Flight flight: flightSchedule.getFlightSchedule()){
            if(flight.getDepartDate().equals(searchTxt)){
            Object[] row = new Object[5];
            row[0] = flight;
            row[1] = flight.getDepartLocation();
            row[2] = flight.getDepartDate();
            row[3] = flightSchedule.getFlightScheduleID();
            if(flight.getSeatsNum()>flight.getCustomerNum()){
              row[4] = true; 
            }else 
            {
              row[4] = false;
            }
            dtm.addRow(row);
            }
            }
        }
        }else if(selected.toString().equals("Depart Location")){
        for(FlightSchedule flightSchedule: masterFlightSchedule.getMasterFlightSchedule()){
            for(Flight flight: flightSchedule.getFlightSchedule()){
            if(flight.getDepartLocation().equals(searchTxt)){
            Object[] row = new Object[5];
            row[0] = flight;
            row[1] = flight.getDepartLocation();
            row[2] = flight.getDepartDate();
            row[3] = flightSchedule.getFlightScheduleID();
            if(flight.getSeatsNum()>flight.getCustomerNum()){
              row[4] = true; 
            }else 
            {
              row[4] = false;
            }
            dtm.addRow(row);
            }
            }
        }
        }else if(selected.toString().equals("Time of Day")){
        for(FlightSchedule flightSchedule: masterFlightSchedule.getMasterFlightSchedule()){
            for(Flight flight: flightSchedule.getFlightSchedule()){
            if(flight.getTimeOfDay().equals(searchTxt)){
            Object[] row = new Object[5];
            row[0] = flight;
            row[1] = flight.getDepartLocation();
            row[2] = flight.getDepartDate();
            row[3] = flightSchedule.getFlightScheduleID();
            if(flight.getSeatsNum()>flight.getCustomerNum()){
              row[4] = true; 
            }else 
            {
              row[4] = false;
            };
            dtm.addRow(row);
            }
            }
          }
        }else{
            JOptionPane.showMessageDialog(null, "No best match!");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtCustomerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustomerIDActionPerformed

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblFlightSchedule.getSelectedRow();
         if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select!");
         }else{
          if((boolean)tblFlightSchedule.getValueAt(selectedRow,4)){
             Flight flightSelected = (Flight)tblFlightSchedule.getValueAt(selectedRow,0);
           String selectedFlightID = flightSelected.getFlightID();
              Customer customer = customerDirectory.addCustomer();
              customer.setCustomerID(txtCustomerID.getText());
              customer.setFlightID(selectedFlightID);
            for(FlightSchedule flightSchedule: masterFlightSchedule.getMasterFlightSchedule()){
            for(Flight flight: flightSchedule.getFlightSchedule()){
            if(flight.getFlightID().equals(selectedFlightID)){
                flight.setCustomerNum(flight.getCustomerNum()+1);
            }
            }
            }
            JOptionPane.showMessageDialog(null, "The seat is booked!");
            populateTable();
          }else{
            JOptionPane.showMessageDialog(null, "This flight is full!");
          }
         }
    }//GEN-LAST:event_btnBookActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBook;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNewFlight;
    private javax.swing.JButton btnRefreash;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewFlight;
    private javax.swing.JComboBox<String> cbSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblFlightSchedule;
    private javax.swing.JTextField txtCustomerID;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
