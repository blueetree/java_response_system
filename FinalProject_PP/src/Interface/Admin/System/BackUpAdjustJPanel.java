/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Admin.System;

import Interface.Admin.Country.*;
import Interface.Command.*;
import Business.Area.Area;
import Business.Country.Country;
import Business.District.District;
import Business.EcoSystem;
import Business.MaterialList.InventoryItem;
import Business.MaterialList.Item;
import Business.Person.Person;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jiahuanli
 */
public class BackUpAdjustJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BackUpAdjustJPanel
     */
    JPanel CommandContainer;
    EcoSystem system;

    BackUpAdjustJPanel(JPanel CommandContainer, EcoSystem system) {
        initComponents();
        this.CommandContainer = CommandContainer;
        this.system = system;
        populatecbx1();
        populatecbx2();
    }

    public void populatecbx1() {
        cbxArea1.removeAllItems();

        for (Country country : system.getCountryList()) {
            cbxArea1.addItem(country);
        }
    }

    public void populatecbx2() {
        cbxArea2.removeAllItems();

        for (Country country : system.getCountryList()) {
            cbxArea2.addItem(country);
        }
    }

    public void populateMaterial1() {
        System.out.println("inside populateMaterial1");
        DefaultTableModel dtm = (DefaultTableModel) tblMaterial1.getModel();
        dtm.setRowCount(0);
        for (Country country : system.getCountryList()) {
            if (cbxArea1.getSelectedItem().equals(country)) {
                for (Item item : country.getItemDirectory().getItemList()) {
                    Object row[] = new Object[2];
                    row[0] = item;
                    row[1] = item.getQuantity();
                    System.out.println("row-item.name: "+item+"row-item.getQuantity(): "+item.getQuantity());
                    dtm.addRow(row);
                }
            }
       
        }
    }

    public void populateMaterial2() {
        DefaultTableModel dtm = (DefaultTableModel) tblMaterial2.getModel();
        dtm.setRowCount(0);
        for (Country country : system.getCountryList()) {
            if (cbxArea2.getSelectedItem().equals(country)) {
                for (Item item : country.getItemDirectory().getItemList()) {
                    Object row[] = new Object[2];
                    row[0] = item;
                    row[1] = item.getQuantity();
                    dtm.addRow(row);
                }
            }
       
        }
    }



    public double distance(District a, District b) {
        double distance = (a.getLocation_x() - b.getLocation_x()) * (a.getLocation_x() - b.getLocation_x()) + (a.getLocation_y() - b.getLocation_y()) * (a.getLocation_y() - b.getLocation_y());
        double n = Math.sqrt(distance);
        return n;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblMaterial1 = new javax.swing.JTable();
        cbxArea1 = new javax.swing.JComboBox();
        cbxArea2 = new javax.swing.JComboBox();
        btnTransferM = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblMaterial2 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        tblMaterial1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMaterial1);
        if (tblMaterial1.getColumnModel().getColumnCount() > 0) {
            tblMaterial1.getColumnModel().getColumn(0).setResizable(false);
            tblMaterial1.getColumnModel().getColumn(1).setResizable(false);
        }

        cbxArea1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxArea1ActionPerformed(evt);
            }
        });

        cbxArea2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxArea2ActionPerformed(evt);
            }
        });

        btnTransferM.setFont(new java.awt.Font("Lucida Sans", 0, 13)); // NOI18N
        btnTransferM.setText("Transfer");
        btnTransferM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransferMActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Lucida Sans", 0, 13)); // NOI18N
        jLabel8.setText("Amount");

        txtAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAmountActionPerformed(evt);
            }
        });

        tblMaterial2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblMaterial2);
        if (tblMaterial2.getColumnModel().getColumnCount() > 0) {
            tblMaterial2.getColumnModel().getColumn(0).setResizable(false);
            tblMaterial2.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel10.setFont(new java.awt.Font("Lucida Sans", 0, 13)); // NOI18N
        jLabel10.setText("From");

        jLabel11.setFont(new java.awt.Font("Lucida Sans", 0, 13)); // NOI18N
        jLabel11.setText("To");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(82, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(cbxArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTransferM)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(101, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10)
                    .addComponent(cbxArea1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxArea2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(btnTransferM))
                .addContainerGap(124, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbxArea1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxArea1ActionPerformed
        System.out.println("inside cbxArea1ActionPerformed");
        populateMaterial1();

        // TODO add your handling code here:
    }//GEN-LAST:event_cbxArea1ActionPerformed

    private void cbxArea2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxArea2ActionPerformed
        populateMaterial2();
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxArea2ActionPerformed

    private void btnTransferMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransferMActionPerformed
        int selectedRow = tblMaterial1.getSelectedRow();
        Country districtto = null;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row first", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            districtto = (Country)cbxArea2.getSelectedItem();
           
            Item item = (Item) tblMaterial1.getValueAt(selectedRow, 0);
            System.out.println("2-item.getQuantity(): "+item.getQuantity());
            Item fromItemTemp = new InventoryItem();
            Item toItemTemp = new InventoryItem();
            boolean equal = false;
            for(Item toitem : districtto.getItemDirectory().getItemList()){
                if(toitem.getName().equals(item.getName())){
                    if(item.getQuantity()>=Integer.parseInt(txtAmount.getText())){

                    toitem.setQuantity(toitem.getQuantity()+Integer.parseInt(txtAmount.getText()));
                    //districtfrom.getItemDirectory().getItemList().remove(item);
                    System.out.println("first-item.getQuantity(): "+item.getQuantity()+" txtAmount.getText(): "+txtAmount.getText());
                    
                    int qua = item.getQuantity()-Integer.parseInt(txtAmount.getText());
                    item.setQuantity(qua);
                    System.out.println("second-item.getQuantity(): "+item.getQuantity()+" txtAmount.getText(): "+txtAmount.getText()+" qua:"+qua);
                    fromItemTemp = item;
                    System.out.println("insidefor-fromItemTemp: "+fromItemTemp+"  Q: "+fromItemTemp.getQuantity());
                     
                    //districtfrom.getItemDirectory().getItemList().add(item);
                    equal = true;
                    }else{
                        JOptionPane.showMessageDialog(null, "Don't have enough stock", "Warning", JOptionPane.WARNING_MESSAGE);

                    }
                }
            }
                
                if(!equal){
                    if(item.getQuantity()>=Integer.parseInt(txtAmount.getText())){
                    Item newitem = new InventoryItem();
                    newitem.setName(item.getName());
                    newitem.setPrice(item.getPrice());
                    newitem.setQuantity(Integer.parseInt(txtAmount.getText()));
                    toItemTemp = newitem;
                    item.setQuantity(item.getQuantity()-Integer.parseInt(txtAmount.getText()));
                    fromItemTemp = item;
                    //districtto.getItemDirectory().getItemList().add(newitem);
                    //districtfrom.getItemDirectory().getItemList().remove(item);
                    
                    //districtfrom.getItemDirectory().getItemList().add(item);
                    }else{
                        JOptionPane.showMessageDialog(null, "Don't have enough stock", "Warning", JOptionPane.WARNING_MESSAGE);

                    }
                }
               
            
            System.out.println("fromItemTemp: "+fromItemTemp+"  Q: "+fromItemTemp.getQuantity());
            System.out.println("toItemTemp: "+toItemTemp+"  Q: "+toItemTemp.getQuantity());
            //districtfrom.getItemDirectory().getItemList().add(fromItemTemp);
            if(!equal){
            districtto.getItemDirectory().getItemList().add(toItemTemp);
            }
            JOptionPane.showMessageDialog(null, "Transfer Complete!");
            populateMaterial1();
            populateMaterial2();
        // TODO add your handling code here:
        
        }
    }//GEN-LAST:event_btnTransferMActionPerformed

    private void txtAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAmountActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtAmountActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTransferM;
    private javax.swing.JComboBox cbxArea1;
    private javax.swing.JComboBox cbxArea2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable tblMaterial1;
    private javax.swing.JTable tblMaterial2;
    private javax.swing.JTextField txtAmount;
    // End of variables declaration//GEN-END:variables
}
